package ${package.Controller};

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import ${package.Entity}.${entity};
import ${package.Service}.${table.serviceName};
import ${package.Other}.${upperClassName}Query;


import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
#if(${restControllerStyle})
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

import java.util.List;

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Slf4j
@Api(tags = "$!{table.comment}")
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

#*    @Autowired
    private MapperFacade mapperFacade;*#
    @Autowired
    private ${table.serviceName} ${table.serviceName};
    @Autowired
    private ${upperClassName}Service ${lowerClassName}Service;

    /**
     * 分页查询
     *
     * @param query
     * @return Result
     */
    @ApiOperation(value = "分页查询", notes = "分页查询")
    @GetMapping("/page")
    public Response<Page<${entity}>>get${upperClassName}Page(${upperClassName}Query query){
      #*  ${entity} ${lowerClassName} = mapperFacade.map(query, ${entity}.class);*#
        return Response.success(${lowerClassName}Service.page(query.toPage(), Wrappers.query(${lowerClassName})));
    }


    /**
     * 列表查询-不分页
     *
     * @param query
     * @return Result
     */
    @ApiOperation(value = "列表查询", notes = "列表查询")
    @GetMapping("/getList")
    public Response<List<${entity}>>get${upperClassName}List(${upperClassName}Query query){
#*        ${entity} ${lowerClassName} = mapperFacade.map(query, ${entity}.class);*#
        QueryWrapper<${entity}> ew = Wrappers.query(${lowerClassName});
        ew.last(null != query.getListLimit(), "limit " + query.getListLimit());
        return Response.success(${lowerClassName}Service.list(ew));
    }


    /**
     * 根据id查询$!{table.comment}
     *
     * @param id id
     * @return Result
     */
    @ApiOperation(value = "通过id查询", notes = "通过id查询")
    @GetMapping("/getById")
    public Response<${entity}> getById(@RequestParam Long id){
        return Response.success(${lowerClassName}Service.getById(id));
    }

    /**
     * 新增$!{table.comment}
     *
     * @param ${lowerClassName} $!{table.comment}
     * @return Result
     */
    @ApiOperation(value = "新增$!{table.comment}", notes = "新增$!{table.comment}")
    @PostMapping("/save")
    public Response<?> save(@RequestBody ${entity} ${lowerClassName}){
        return Response.success(${lowerClassName}Service.save(${lowerClassName}));
    }

    /**
     * 修改$!{table.comment}
     *
     * @param ${lowerClassName} $!{table.comment}
     * @return Result
     */
    @ApiOperation(value = "修改$!{table.comment}", notes = "修改$!{table.comment}")
    @PostMapping("updateById")
    public Response<?> updateById(@RequestBody ${entity} ${lowerClassName}){
        return Response.success(${lowerClassName}Service.updateById(${lowerClassName}));
    }

    /**
     * 通过id删除$!{table.comment}
     *
     * @param id id
     * @return Result
     */
    @ApiOperation(value = "通过id删除 $!{table.comment}", notes = "通过id删除$!{table.comment}")
    @PostMapping("/removeById")
    public Response<?> removeById(@RequestParam Long id){
        return Response.success(${lowerClassName}Service.removeById(id));
    }

}
#end